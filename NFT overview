pragma solidity ^0.6.0;

import "https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol";

contract MyNFT is ERC721 {
  // Define the name, symbol, and number of tokens for the NFT
  string public name = "My NFT";
  string public symbol = "NFT";
  uint256 public totalSupply;

  // Mapping from token ID to metadata URI
  mapping (uint256 => string) public tokenURIs;

  // Mapping from token ID to owner
  mapping (uint256 => address) public tokenOwners;

  // Events for transfer and approval of tokens
  event Transfer(address indexed from, address indexed to, uint256 tokenId);
  event Approval(address indexed owner, address indexed approved, uint256 tokenId);

  constructor() public {
    // Initialize the contract with a total supply of 10 tokens
    totalSupply = 10;

    // Assign the tokens to the contract owner
    for (uint256 i = 0; i < totalSupply; i++) {
      tokenOwners[i] = msg.sender;
    }
  }

  // Function to get the owner of a given token ID
  function ownerOf(uint256 _tokenId) public view returns (address) {
    return tokenOwners[_tokenId];
  }

  // Function to transfer a token to a given address
  function transfer(address _to, uint256 _tokenId) public {
    // Ensure the token ID is valid and the caller is the owner of the token
    require(_tokenId < totalSupply, "Token ID out of bounds");
    require(tokenOwners[_tokenId] == msg.sender, "Caller is not the owner of the token");

    // Transfer the token to the specified address
    tokenOwners[_tokenId] = _to;
    emit Transfer(msg.sender, _to, _tokenId);
  }

  // Function to approve a given address to transfer a token
  function approve(address _approved, uint256 _tokenId) public {
    // Ensure the token ID is valid and the caller is the owner of the token
    require(_tokenId < totalSupply, "Token ID out of bounds");
    require(tokenOwners[_tokenId] == msg.sender, "Caller is not the owner of the token");

    // Approve the specified address to transfer the token
    emit Approval(msg.sender, _approved, _tokenId);
  }

  // Function to return the metadata URI for a given token ID
  function tokenURI(uint256 _tokenId) public view returns (string memory) {
    return tokenURIs[_tokenId];
  }
}
